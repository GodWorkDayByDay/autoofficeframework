{"name":"Autoofficeframework","tagline":"Framework that uses Component Object Model via C++ MFC to interact with MS Office applications. ","body":"# AutoOfficeFramework\r\n\r\nFramework classes for C++ that uses Component Object Model to interact with MS Office applications. The code can be used with any native or .NET C++ application.\r\n\r\nThe framework is able to start new MS Word and MS Excel (PowerPoint is not supported in current version) process, to create document, write into document, add picture, add comment, read document (usable for templates that has to be changed with some other content automatically) and many more.\r\n\r\nPre-requirements: Installed MS Office on machine.\r\n\r\nDeveloped in Visual Studio 2008 (Should work with Visual C++ 2008 and later). The project cannot be compiled in Visual Studio express edition, because it doesn't support MFC projects.\r\n\r\n\r\n# Usage\r\n##Introduction\r\nAuto Office Frmaevork is framework for automating functions of MS Office applications. It works via Component Object Model, and via COM interfaces interacts with MS Office Functions. First realease version supports large scale of MS Word functionlaity, and some functionality of MS Excel. Other programs from MS Office will be supported in later versions. Also Auto Office Framework is supported in all versions of MS Office since MS Office 2003 (tested), and maybe earlier (not tested).\r\n\r\n##Motivation\r\nMany applications can be extended to create reports, or to use MS Office documents. It can be used for reports, or can be used as templates for creating documents reading some database. There are some frameworks for interaction with MS Office applications but in languages like Java or .NET programming languages. If someone want to interact with MS Office via native C++, there is a problem. To solve that problem is created Auto Office Framework for MFC C++.\r\n\r\n##Details\r\nThe library contains classes for each office applications that are able to ineract with that MS Office component. In first (0.1) version of Auto Office Framework there are just two, CMSWord and CMSExcel classes. CMSWord class is used to interact with MS Office Word application. This is the class interface that can be used:\r\n```\r\nclass CMSWord\r\n {\r\n protected:\r\n         IDispatch*      m_pWApp;\r\n         IDispatch*  m_pDocuments;\r\n         IDispatch*      m_pActiveDocument;\r\n         IDispatch*  pDocApp;\r\n         HRESULT         m_hr;\r\n         HRESULT Initialize(bool bVisible=true);\r\n public:\r\n         //Constructor creates a instance of object\r\n         CMSWord();\r\n         //Destructor\r\n         ~CMSWord();\r\n         //Sets visibility of active document\r\n         HRESULT SetVisible(bool bVisible=true);\r\n         //Quits the MS Word. Closes process\r\n         HRESULT Quit();\r\n         //Opens document and set document's visibility\r\n         HRESULT OpenDocument(LPCTSTR szFilename, bool bVisible=true);\r\n         //Open new empty document\r\n         HRESULT NewDocument(bool bVisible=true);\r\n         //Closes active document with or without saving\r\n         HRESULT CloseActiveDocument(bool bSave=true);\r\n         //Finds first next text in active document as specified \r\n         HRESULT FindFirst(LPCTSTR szText);\r\n         //Finds first next text in active document as specified. Returns false if end of document reached.\r\n         bool FindFirstBool(LPCTSTR szText);\r\n         //Close all documents\r\n         HRESULT CloseDocuments(bool bSave=true);\r\n         //Copies selected text into clipboard\r\n         HRESULT Copy();\r\n         //Pastes from Clipboard to active document\r\n         HRESULT Paste();\r\n         //Activate document by specified id\r\n         HRESULT ActivateDocumentById(int id);\r\n         //Returns number of opened documents in the process. There can be more MS Word processes, and the framework won't see documents controled by other processes.\r\n         int CountDocuments();\r\n         //Sets selected text. Replace it with specified text.\r\n         HRESULT SetSelectionText(LPCTSTR szText);\r\n         //Inserts picture from path specified in argument.\r\n         HRESULT InserPicture(LPCTSTR szFilename);\r\n         //Inserts text in active document.\r\n         HRESULT InserText(LPCTSTR szText);\r\n         // Inserts MS Word file into active document with all formating.\r\n         HRESULT InsertFile(LPCTSTR szFilename);\r\n         //Adds comment in ballon. Text is specified in argument\r\n         HRESULT AddComment(LPCTSTR szComment);\r\n         //Moves cursor. 2 is forward, 1 i backward. Selection is true then it selects text as it moves\r\n         HRESULT MoveCursor(int nDirection=2,bool bSelection=false);\r\n         //Delete char forward or backward\r\n         HRESULT DeleteChar(bool bBack=false);\r\n         //Sets bold for next inserted chars or for selected text.\r\n         HRESULT SetBold(bool bBold=false);\r\n         //Sets italic for next inserted chars or for selected text.\r\n         HRESULT SetItalic(bool bItalic=false);\r\n         //Sets underline for next inserted chars or for selected text.\r\n         HRESULT SetUnderline(bool bUnderline=false);\r\n         //Check spelling\r\n         HRESULT CheckSpelling(LPCTSTR szWord, bool &bResult);\r\n         //check grammer\r\n         HRESULT CheckGrammer(LPCTSTR szString, bool &bResult);\r\n         //sets font as specified\r\n         HRESULT SetFont(LPCTSTR szFontName, int nSize, bool bBold, bool bItalic,COLORREF crColor);\r\n         //Gets string of specified size\r\n         CString GetString(int nlenght);\r\n         //Get selected string\r\n         CString GetSelectedString();\r\n         //Saves file\r\n         HRESULT SaveFile(LPCTSTR czFileName);\r\n };\r\n```\r\nInterface of CMSExcel class is:\r\n```\r\nclass CMSExcel\r\n{\r\nprotected:\r\n        HRESULT m_hr;\r\n        IDispatch*      m_pEApp;\r\n        IDispatch*  m_pBooks;\r\n        IDispatch*      m_pActiveBook;\r\nprivate:\r\n        HRESULT Initialize(bool bVisible=true);\r\npublic:\r\n        CMSExcel(void);\r\n        ~CMSExcel(void);\r\n        HRESULT SetVisible(bool bVisible=true);\r\n        HRESULT NewExcelBook(bool bVisible=true);\r\n        HRESULT OpenExcelBook(LPCTSTR szFilename, bool bVisible=true);\r\n        HRESULT SaveAs(LPCTSTR szFilename, int nSaveAs=40);\r\n        HRESULT ProtectExcelWorkbook(LPCTSTR szPassword);\r\n        HRESULT UnProtectExcelWorkbook(LPCTSTR szPassword);\r\n        HRESULT ProtectExcelSheet(int nSheetNo, LPCTSTR szPassword);\r\n        HRESULT UnProtectExcelSheet(int nSheetNo, LPCTSTR szPassword);\r\n        HRESULT SetExcelCellFormat(LPCTSTR szRange, LPCTSTR szFormat);\r\n        HRESULT SetExcelSheetName(int nSheetNo, LPCTSTR szSheetName);\r\n        HRESULT GetExcelValue(LPCTSTR szCell, CString &sValue);\r\n        HRESULT SetExcelBackgroundColor(LPCTSTR szRange, COLORREF crColor, int nPattern);\r\n        HRESULT SetExcelFont(LPCTSTR szRange, LPCTSTR szName, int nSize, COLORREF crColor, bool bBold, bool bItalic);\r\n        HRESULT SetExcelValue(LPCTSTR szRange,LPCTSTR szValue,bool bAutoFit, int nAlignment);\r\n        HRESULT SetExcelBorder(LPCTSTR szRange, int nStyle);\r\n        HRESULT MergeExcelCells(LPCTSTR szRange);\r\n        HRESULT AutoFitExcelColumn(LPCTSTR szColumn);\r\n        HRESULT AddExcelChart(LPCTSTR szRange, LPCTSTR szTitle, int nChartType, int nLeft, int nTop, int nWidth, int nHeight, int nRangeSheet, int nChartSheet);\r\n        HRESULT MoveCursor(int nDirection);\r\n        HRESULT GetActiveCell(int &nRow, int &nCol);\r\n        HRESULT SetActiveCellText(LPCTSTR szText);\r\n        HRESULT Quit();\r\n};\r\n```\r\nAlso all of this methods from classes uses OLEMethod function. This is the function that uses COM to gain access to some remote objects and to invoke methods or to get or set some property. Coding in COM requires a lot of code, and this function enables to reuse the great amount of that code.\r\n\r\n# Authors and Contributors\r\nThis project is created by Nikola Milosevic (@nikolamilosevic86), as his BSc project at the School of Electrical Engineering, University of Belgrade.\r\n\r\n### Support or Contact\r\nHaving trouble with this project? Contact us nikola.milosevic@manchester.ac.uk and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}